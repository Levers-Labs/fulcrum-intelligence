"""Initial

Revision ID: 228078f119cf
Revises:
Create Date: 2024-06-20 15:45:30.942550

"""

from collections.abc import Sequence

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "228078f119cf"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "correlate",
        sa.Column("metric_id_1", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("metric_id_2", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("correlation_coefficient", sa.Float(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema="analysis_store",
    )
    op.create_index(
        op.f("ix_analysis_store_correlate_metric_id_1"),
        "correlate",
        ["metric_id_1"],
        unique=False,
        schema="analysis_store",
    )
    op.create_index(
        op.f("ix_analysis_store_correlate_metric_id_2"),
        "correlate",
        ["metric_id_2"],
        unique=False,
        schema="analysis_store",
    )
    op.create_table(
        "describe",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("metric_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=False),
        sa.Column("dimension", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("mean", sa.Float(), nullable=False),
        sa.Column("median", sa.Float(), nullable=False),
        sa.Column("variance", sa.Float(), nullable=False),
        sa.Column("standard_deviation", sa.Float(), nullable=False),
        sa.Column("percentile_25", sa.Float(), nullable=False),
        sa.Column("percentile_50", sa.Float(), nullable=False),
        sa.Column("percentile_75", sa.Float(), nullable=False),
        sa.Column("percentile_90", sa.Float(), nullable=False),
        sa.Column("percentile_95", sa.Float(), nullable=False),
        sa.Column("percentile_99", sa.Float(), nullable=False),
        sa.Column("min", sa.Float(), nullable=False),
        sa.Column("max", sa.Float(), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.Column("sum", sa.Float(), nullable=False),
        sa.Column("unique", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema="analysis_store",
    )
    op.create_index(
        op.f("ix_analysis_store_describe_dimension"), "describe", ["dimension"], unique=False, schema="analysis_store"
    )
    op.create_index(
        op.f("ix_analysis_store_describe_metric_id"), "describe", ["metric_id"], unique=False, schema="analysis_store"
    )
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("first_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("last_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("password", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema="analysis_store",
    )
    op.create_index(op.f("ix_analysis_store_user_email"), "user", ["email"], unique=True, schema="analysis_store")
    op.drop_table("alembic_version", schema="story_store")
    op.drop_index("ix_story_store_story_genre", table_name="story", schema="story_store")
    op.drop_index("ix_story_store_story_grain", table_name="story", schema="story_store")
    op.drop_index("ix_story_store_story_metric_id", table_name="story", schema="story_store")
    op.drop_index("ix_story_store_story_story_date", table_name="story", schema="story_store")
    op.drop_index("ix_story_store_story_story_group", table_name="story", schema="story_store")
    op.drop_index("ix_story_store_story_story_type", table_name="story", schema="story_store")
    op.drop_table("story", schema="story_store")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "story",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('story_store.story_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP(0)"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP(0)"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "genre",
            postgresql.ENUM(
                "GROWTH", "TRENDS", "PERFORMANCE", "BIG_MOVES", "ROOT_CAUSES", name="storygenre", schema="story_store"
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "story_group",
            postgresql.ENUM(
                "GROWTH_RATES",
                "TREND_CHANGES",
                "TREND_EXCEPTIONS",
                "LONG_RANGE",
                "GOAL_VS_ACTUAL",
                "LIKELY_STATUS",
                "RECORD_VALUES",
                "STATUS_CHANGE",
                "SEGMENT_DRIFT",
                "REQUIRED_PERFORMANCE",
                "SIGNIFICANT_SEGMENTS",
                name="storygroup",
                schema="story_store",
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "story_type",
            postgresql.ENUM(
                "SLOWING_GROWTH",
                "ACCELERATING_GROWTH",
                "STABLE_TREND",
                "NEW_UPWARD_TREND",
                "NEW_DOWNWARD_TREND",
                "PERFORMANCE_PLATEAU",
                "SPIKE",
                "DROP",
                "IMPROVING_PERFORMANCE",
                "WORSENING_PERFORMANCE",
                "ON_TRACK",
                "OFF_TRACK",
                "IMPROVING_STATUS",
                "WORSENING_STATUS",
                "REQUIRED_PERFORMANCE",
                "HOLD_STEADY",
                "RECORD_HIGH",
                "RECORD_LOW",
                "LIKELY_ON_TRACK",
                "LIKELY_OFF_TRACK",
                "GROWING_SEGMENT",
                "SHRINKING_SEGMENT",
                "IMPROVING_SEGMENT",
                "WORSENING_SEGMENT",
                "TOP_4_SEGMENTS",
                "BOTTOM_4_SEGMENTS",
                name="storytype",
                schema="story_store",
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "grain",
            postgresql.ENUM("DAY", "WEEK", "MONTH", "QUARTER", "YEAR", name="grain", schema="story_store"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("metric_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("title", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("title_template", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("detail", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("detail_template", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("variables", postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
        sa.Column("series", postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
        sa.Column("story_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="pk_story"),
        schema="story_store",
    )
    op.create_index("ix_story_store_story_story_type", "story", ["story_type"], unique=False, schema="story_store")
    op.create_index("ix_story_store_story_story_group", "story", ["story_group"], unique=False, schema="story_store")
    op.create_index("ix_story_store_story_story_date", "story", ["story_date"], unique=False, schema="story_store")
    op.create_index("ix_story_store_story_metric_id", "story", ["metric_id"], unique=False, schema="story_store")
    op.create_index("ix_story_store_story_grain", "story", ["grain"], unique=False, schema="story_store")
    op.create_index("ix_story_store_story_genre", "story", ["genre"], unique=False, schema="story_store")
    op.create_table(
        "alembic_version",
        sa.Column("version_num", sa.VARCHAR(length=32), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("version_num", name="alembic_version_pkc"),
        schema="story_store",
    )
    op.drop_index(op.f("ix_analysis_store_user_email"), table_name="user", schema="analysis_store")
    op.drop_table("user", schema="analysis_store")
    op.drop_index(op.f("ix_analysis_store_describe_metric_id"), table_name="describe", schema="analysis_store")
    op.drop_index(op.f("ix_analysis_store_describe_dimension"), table_name="describe", schema="analysis_store")
    op.drop_table("describe", schema="analysis_store")
    op.drop_index(op.f("ix_analysis_store_correlate_metric_id_2"), table_name="correlate", schema="analysis_store")
    op.drop_index(op.f("ix_analysis_store_correlate_metric_id_1"), table_name="correlate", schema="analysis_store")
    op.drop_table("correlate", schema="analysis_store")
    # ### end Alembic commands ###
