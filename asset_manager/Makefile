.PHONY: install dev ui dev-file ui-file run materialize materialize-asset status clean clean-all help

# Set Dagster home directory
DAGSTER_HOME := $(shell pwd)/.dagster

# Install dependencies and package in development mode
install:
	poetry install
	poetry run pip install -e .
	mkdir -p $(DAGSTER_HOME)
	@echo "‚úÖ Installed dependencies and created Dagster home at: $(DAGSTER_HOME)"

# Start development server with UI (recommended)
dev:
	@echo "üöÄ Starting Dagster dev server..."
	@echo "üìÅ Using Dagster home: $(DAGSTER_HOME)"
	DAGSTER_HOME=$(DAGSTER_HOME) poetry run dagster dev -m asset_manager.definitions

# Start Dagster UI only
ui:
	@echo "üöÄ Starting Dagster UI..."
	@echo "üìÅ Using Dagster home: $(DAGSTER_HOME)"
	DAGSTER_HOME=$(DAGSTER_HOME) poetry run dagster-webserver -m asset_manager.definitions

# Alternative file-based commands
dev-file:
	@echo "üöÄ Starting Dagster dev server (file-based)..."
	@echo "üìÅ Using Dagster home: $(DAGSTER_HOME)"
	DAGSTER_HOME=$(DAGSTER_HOME) poetry run dagster dev -f asset_manager/definitions.py

ui-file:
	@echo "üöÄ Starting Dagster UI (file-based)..."
	@echo "üìÅ Using Dagster home: $(DAGSTER_HOME)"
	DAGSTER_HOME=$(DAGSTER_HOME) poetry run dagster-webserver -f asset_manager/definitions.py

# Run assets programmatically
run:
	@echo "üîÑ Running assets programmatically..."
	DAGSTER_HOME=$(DAGSTER_HOME) poetry run python run.py

# Materialize all assets
materialize:
	@echo "‚ö° Materializing all assets..."
	DAGSTER_HOME=$(DAGSTER_HOME) poetry run dagster asset materialize --select "*" -m asset_manager.definitions

# Materialize specific asset
materialize-asset:
	@echo "‚ö° Materializing asset: $(ASSET)"
	DAGSTER_HOME=$(DAGSTER_HOME) poetry run dagster asset materialize --select "$(ASSET)" -m asset_manager.definitions

# Run specific job manually
run-job:
	@echo "üîÑ Running job: $(JOB)"
	DAGSTER_HOME=$(DAGSTER_HOME) poetry run dagster job execute --job "$(JOB)" -m asset_manager.definitions

# List all jobs
list-jobs:
	@echo "üìã Available jobs:"
	DAGSTER_HOME=$(DAGSTER_HOME) poetry run dagster job list -m asset_manager.definitions

# List all schedules
list-schedules:
	@echo "üìÖ Available schedules:"
	DAGSTER_HOME=$(DAGSTER_HOME) poetry run dagster schedule list -m asset_manager.definitions

# Start/stop schedules (requires daemon)
start-schedule:
	@echo "‚ñ∂Ô∏è Starting schedule: $(SCHEDULE)"
	DAGSTER_HOME=$(DAGSTER_HOME) poetry run dagster schedule start "$(SCHEDULE)" -m asset_manager.definitions

stop-schedule:
	@echo "‚èπÔ∏è Stopping schedule: $(SCHEDULE)"
	DAGSTER_HOME=$(DAGSTER_HOME) poetry run dagster schedule stop "$(SCHEDULE)" -m asset_manager.definitions

# Start Dagster daemon (required for schedules/sensors)
daemon:
	@echo "ü§ñ Starting Dagster daemon for schedules and sensors..."
	@echo "üìÅ Using Dagster home: $(DAGSTER_HOME)"
	DAGSTER_HOME=$(DAGSTER_HOME) poetry run dagster-daemon run

# Clean Dagster storage only
clean:
	@echo "üßπ Cleaning Dagster storage..."
	rm -rf $(DAGSTER_HOME)
	@echo "‚úÖ Cleaned Dagster storage"

# Clean everything (Dagster storage + Python cache)
clean-all:
	@echo "üßπ Cleaning everything..."
	rm -rf $(DAGSTER_HOME)
	rm -rf __pycache__/
	find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@echo "‚úÖ Cleaned everything"

# Show help
help:
	@echo ""
	@echo "üîß Asset Manager - Dagster Commands"
	@echo "=================================="
	@echo ""
	@echo "Setup Commands:"
	@echo "  install              - Install dependencies and create Dagster home"
	@echo ""
	@echo "Development Commands:"
	@echo "  dev                 - Start development server with UI (recommended)"
	@echo "  ui                  - Start Dagster UI only"
	@echo "  dev-file            - Start dev server using file path"
	@echo "  ui-file             - Start UI using file path"
	@echo ""
	@echo "Asset Commands:"
	@echo "  run                 - Run assets programmatically"
	@echo "  materialize         - Materialize all assets"
	@echo "  materialize-asset   - Materialize specific asset (use ASSET=name)"
	@echo "  status              - Check asset status"
	@echo "  run-job             - Run specific job manually (use JOB=name)"
	@echo "  list-jobs           - List all available jobs"
	@echo "  list-schedules      - List all schedules"
	@echo "  start-schedule      - Start a schedule (use SCHEDULE=name)"
	@echo "  stop-schedule       - Stop a schedule (use SCHEDULE=name)"
	@echo "  daemon              - Start Dagster daemon (required for schedules)"
	@echo ""
	@echo "Cleanup Commands:"
	@echo "  clean               - Clean Dagster storage only"
	@echo "  clean-all           - Clean Dagster storage + Python cache"
	@echo ""
	@echo "Examples:"
	@echo "  make install                           # Setup everything"
	@echo "  make dev                              # Start development"
	@echo "  make run-job JOB=daily_sales_job          # Run specific job"
	@echo "  make start-schedule SCHEDULE=daily_sales_schedule  # Start schedule"
	@echo "  make daemon                           # Start daemon for schedules"
	@echo ""
	@echo "üìÅ Dagster home: $(DAGSTER_HOME)"
	@echo "üåê UI will be available at: http://localhost:3000"
	@echo ""