"""notification-models

Revision ID: d263b8b6eddf
Revises: c830f7ff651e
Create Date: 2025-02-14 16:09:11.026726

"""

from collections.abc import Sequence

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "d263b8b6eddf"
down_revision: str | None = "c830f7ff651e"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "alert",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("tenant_id", sa.Integer(), nullable=False),
        sa.Column("type", sa.Enum("ALERT", "REPORT", name="notificationtype"), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("tags", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("grain", sa.Enum("DAY", "WEEK", "MONTH", "QUARTER", "YEAR", name="granularity"), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_published", sa.Boolean(), nullable=False),
        sa.Column("summary", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("trigger", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema="insights_store",
    )
    op.create_index(
        op.f("ix_insights_store_alert_tenant_id"), "alert", ["tenant_id"], unique=False, schema="insights_store"
    )
    op.create_table(
        "report",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("tenant_id", sa.Integer(), nullable=False),
        sa.Column("type", sa.Enum("ALERT", "REPORT", name="notificationtype"), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("tags", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("grain", sa.Enum("DAY", "WEEK", "MONTH", "QUARTER", "YEAR", name="granularity"), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_published", sa.Boolean(), nullable=False),
        sa.Column("summary", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("schedule", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("config", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema="insights_store",
    )
    op.create_index(
        op.f("ix_insights_store_report_tenant_id"), "report", ["tenant_id"], unique=False, schema="insights_store"
    )
    op.create_table(
        "notificationchannelconfig",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("tenant_id", sa.Integer(), nullable=False),
        sa.Column("channel_type", sa.Enum("SLACK", "EMAIL", name="notificationchannel"), nullable=False),
        sa.Column("recipients", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("template", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("config", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("alert_id", sa.Integer(), nullable=True),
        sa.Column("report_id", sa.Integer(), nullable=True),
        sa.Column("notification_type", sa.Enum("ALERT", "REPORT", name="notificationtype"), nullable=False),
        sa.ForeignKeyConstraint(
            ["alert_id"],
            ["insights_store.alert.id"],
        ),
        sa.ForeignKeyConstraint(
            ["report_id"],
            ["insights_store.report.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("alert_id", "notification_type", "channel_type", name="uq_alert_channel"),
        sa.UniqueConstraint("report_id", "notification_type", "channel_type", name="uq_report_channel"),
        schema="insights_store",
    )
    op.create_index(
        op.f("ix_insights_store_notificationchannelconfig_tenant_id"),
        "notificationchannelconfig",
        ["tenant_id"],
        unique=False,
        schema="insights_store",
    )
    op.create_table(
        "notificationexecution",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("tenant_id", sa.Integer(), nullable=False),
        sa.Column("executed_at", sa.DateTime(), nullable=False),
        sa.Column(
            "status", sa.Enum("RUNNING", "COMPLETED", "FAILED", "CRASHED", name="executionstatus"), nullable=False
        ),
        sa.Column("recipients", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("trigger_meta", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("report_meta", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("delivery_meta", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("error_info", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("alert_id", sa.Integer(), nullable=True),
        sa.Column("report_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["alert_id"],
            ["insights_store.alert.id"],
        ),
        sa.ForeignKeyConstraint(
            ["report_id"],
            ["insights_store.report.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="insights_store",
    )
    op.create_index(
        op.f("ix_insights_store_notificationexecution_tenant_id"),
        "notificationexecution",
        ["tenant_id"],
        unique=False,
        schema="insights_store",
    )
    op.create_index(
        op.f("ix_insights_store_user_tenant_id"), "user", ["tenant_id"], unique=False, schema="insights_store"
    )
    op.drop_constraint("fk_user_tenant_id_tenant", "user", schema="insights_store", type_="foreignkey")
    op.execute("ALTER TABLE insights_store.notificationexecution ENABLE ROW LEVEL SECURITY;")
    op.execute(
        "CREATE POLICY tenant_isolation_insights_store_notificationexecution ON insights_store.notificationexecution "
        "USING (tenant_id = current_setting('app.current_tenant')::int);"
    )
    op.execute("ALTER TABLE insights_store.notificationchannelconfig ENABLE ROW LEVEL SECURITY;")
    op.execute(
        "CREATE POLICY tenant_isolation_insights_store_notificationchannelconfig ON "
        "insights_store.notificationchannelconfig USING (tenant_id = current_setting('app.current_tenant')::int);"
    )
    op.execute("ALTER TABLE insights_store.report ENABLE ROW LEVEL SECURITY;")
    op.execute(
        "CREATE POLICY tenant_isolation_insights_store_report ON insights_store.report USING (tenant_id = "
        "current_setting('app.current_tenant')::int);"
    )
    op.execute("ALTER TABLE insights_store.alert ENABLE ROW LEVEL SECURITY;")
    op.execute(
        "CREATE POLICY tenant_isolation_insights_store_alert ON insights_store.alert USING (tenant_id = "
        "current_setting('app.current_tenant')::int);"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key(
        "fk_user_tenant_id_tenant",
        "user",
        "tenant",
        ["tenant_id"],
        ["id"],
        source_schema="insights_store",
        referent_schema="insights_store",
    )
    op.drop_index(op.f("ix_insights_store_user_tenant_id"), table_name="user", schema="insights_store")
    op.drop_index(
        op.f("ix_insights_store_notificationexecution_tenant_id"),
        table_name="notificationexecution",
        schema="insights_store",
    )
    op.drop_table("notificationexecution", schema="insights_store")
    op.drop_index(
        op.f("ix_insights_store_notificationchannelconfig_tenant_id"),
        table_name="notificationchannelconfig",
        schema="insights_store",
    )
    op.drop_table("notificationchannelconfig", schema="insights_store")
    op.drop_index(op.f("ix_insights_store_report_tenant_id"), table_name="report", schema="insights_store")
    op.drop_table("report", schema="insights_store")
    op.drop_index(op.f("ix_insights_store_alert_tenant_id"), table_name="alert", schema="insights_store")
    op.drop_table("alert", schema="insights_store")
    # ### end Alembic commands ###
