"""target_models

Revision ID: e6c112207861
Revises: 98bfcf1b9f76
Create Date: 2025-03-11 19:38:44.250882

"""

from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects.postgresql import ENUM

# revision identifiers, used by Alembic.
revision: str = "e6c112207861"
down_revision: str | None = "98bfcf1b9f76"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "metric_target",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("tenant_id", sa.Integer(), nullable=False),
        sa.Column("metric_id", sa.String(length=255), nullable=False),
        sa.Column(
            "grain",
            ENUM(
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "QUARTERLY",
                "YEARLY",
                name="granularity",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("target_date", sa.Date(), nullable=False),
        sa.Column("target_value", sa.Float(), nullable=False),
        sa.Column("target_upper_bound", sa.Float(), nullable=True),
        sa.Column("target_lower_bound", sa.Float(), nullable=True),
        sa.Column("yellow_buffer", sa.Float(), nullable=True),
        sa.Column("red_buffer", sa.Float(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("metric_id", "grain", "target_date", "tenant_id", name="uq_metric_target"),
        schema="query_store",
    )
    op.create_index(
        "idx_metric_target_date",
        "metric_target",
        ["target_date"],
        unique=False,
        schema="query_store",
        postgresql_ops={"target_date": "DESC"},
    )
    op.create_index("idx_metric_target_grain", "metric_target", ["grain"], unique=False, schema="query_store")
    op.create_index(
        "idx_metric_target_metric_tenant",
        "metric_target",
        ["metric_id", "tenant_id"],
        unique=False,
        schema="query_store",
    )
    op.create_index(
        "idx_target_metric_tenant_grain_date",
        "metric_target",
        ["metric_id", "tenant_id", "grain", "target_date"],
        unique=False,
        schema="query_store",
        postgresql_ops={"target_date": "DESC"},
    )
    op.create_index(
        op.f("ix_query_store_metric_target_tenant_id"),
        "metric_target",
        ["tenant_id"],
        unique=False,
        schema="query_store",
    )
    op.execute("ALTER TABLE query_store.metric_target ENABLE ROW LEVEL SECURITY;")
    op.execute(
        "CREATE POLICY tenant_isolation_query_store_metric_target ON query_store.metric_target "
        "USING (tenant_id = (SELECT current_setting('app.current_tenant')::int));"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_query_store_metric_target_tenant_id"), table_name="metric_target", schema="query_store")
    op.drop_index(
        "idx_target_metric_tenant_grain_date",
        table_name="metric_target",
        schema="query_store",
        postgresql_ops={"target_date": "DESC"},
    )
    op.drop_index("idx_metric_target_metric_tenant", table_name="metric_target", schema="query_store")
    op.drop_index("idx_metric_target_grain", table_name="metric_target", schema="query_store")
    op.drop_index(
        "idx_metric_target_date",
        table_name="metric_target",
        schema="query_store",
        postgresql_ops={"target_date": "DESC"},
    )
    op.drop_table("metric_target", schema="query_store")
    # ### end Alembic commands ###
