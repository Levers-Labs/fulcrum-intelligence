"""metric_cache

Revision ID: 2d3f169dfb3a
Revises: 39823d5e1f03
Create Date: 2025-07-04 16:45:33.690461

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects.postgresql import ENUM

# revision identifiers, used by Alembic.
revision: str = "2d3f169dfb3a"
down_revision: str | None = "39823d5e1f03"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Define the granularity enum
    granularity_enum = ENUM("DAY", "WEEK", "MONTH", "QUARTER", "YEAR", name="granularity", create_type=False)

    op.create_table(
        "metriccachegrainconfig",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("tenant_id", sa.Integer(), nullable=False),
        sa.Column("grain", granularity_enum, nullable=True),
        sa.Column("is_enabled", sa.Boolean(), server_default="true", nullable=True),
        sa.Column("initial_sync_period", sa.Integer(), nullable=True),
        sa.Column("delta_sync_period", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("grain", "tenant_id", name="uq_grain_tenant_id"),
        schema="query_store",
    )
    op.create_index(
        op.f("ix_query_store_metriccachegrainconfig_tenant_id"),
        "metriccachegrainconfig",
        ["tenant_id"],
        unique=False,
        schema="query_store",
    )
    op.create_table(
        "metriccacheconfig",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("current_timestamp(0)"), nullable=False),
        sa.Column("tenant_id", sa.Integer(), nullable=False),
        sa.Column("metric_id", sa.String(length=255), nullable=False),
        sa.Column("is_enabled", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("metric_id", "tenant_id", name="uq_metric_cache_tenant_id"),
        schema="query_store",
    )
    op.create_index(
        op.f("ix_query_store_metriccacheconfig_tenant_id"),
        "metriccacheconfig",
        ["tenant_id"],
        unique=False,
        schema="query_store",
    )
    op.execute("ALTER TABLE query_store.metriccacheconfig ENABLE ROW LEVEL SECURITY;")
    op.execute(
        "CREATE POLICY tenant_isolation_query_store_metriccacheconfig ON query_store.metriccacheconfig USING"
        " (tenant_id = (SELECT current_setting('app.current_tenant')::int));"
    )
    op.execute("ALTER TABLE query_store.metriccachegrainconfig ENABLE ROW LEVEL SECURITY;")
    op.execute(
        "CREATE POLICY tenant_isolation_query_store_metriccachegrainconfig ON query_store.metriccachegrainconfig USING"
        " (tenant_id = (SELECT current_setting('app.current_tenant')::int));"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_query_store_metriccacheconfig_tenant_id"), table_name="metriccacheconfig", schema="query_store"
    )
    op.drop_table("metriccacheconfig", schema="query_store")
    op.drop_index(
        op.f("ix_query_store_metriccachegrainconfig_tenant_id"),
        table_name="metriccachegrainconfig",
        schema="query_store",
    )
    op.drop_table("metriccachegrainconfig", schema="query_store")
    # ### end Alembic commands ###
