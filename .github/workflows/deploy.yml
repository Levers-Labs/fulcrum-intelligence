name: Deploy to AWS Lambda

on:
  # Targeting the insight-backend branch on each push
  push:
    branches:
      - LEV-389_workflow_CICD_pipeline
  # In case of a merge to main branch we will deploy all the modules
  # pull_request:
  #   types: [closed]
  #   branches:
  #     - main

env:
  # replace all the vars with secret later
  AWS_ACCESS_KEY_ID: "ASIASSZID53ACKOF36MF" #${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: "+Uqf8Bl3wvYTghm0jl40tj4t4lcYCpRWy5PyNV2C"
  AWS_REGION: "us-west-1"
  ECR_REGISTRY: "177788415680.dkr.ecr.us-west-1.amazonaws.com"
  TAG: $(date +%Y%m%d_%H%M%S)

jobs:
  insights-backend-deployment:
    runs-on: ubuntu-latest
    env:
      LAMBDA_FUNCTION: "insights-backend-dev"
      IMAGE: "insights-backend"
      MODULE_DIR: "insights_backend"
      MODULE_ECR_REPOSITORY: $ECR_REGISTRY/insights-backend
      MODULE_LAMBDA_FUNCTION_NAME: $LAMBDA_FUNCTION

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and push Docker image for $IMAGE
        working-directory: .
        run: |
          docker build --platform linux/amd64 -t $IMAGE:latest -f $MODULE_DIR/Dockerfile .
          docker tag $IMAGE:latest $ECR_REGISTRY/$IMAGE:$TAG
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker push $ECR_REGISTRY/$IMAGE:$TAG

      - name: Update AWS Lambda function
        run: |
          aws lambda update-function-code \
            --region $AWS_REGION \
            --function-name $MODULE_LAMBDA_FUNCTION_NAME \
            --image-uri $MODULE_ECR_REPOSITORY:$TAG

#  query-manager-deployment:
#    runs-on: ubuntu-latest
#    env:
#      LAMBDA_FUNCTION: "query-manager-dev"
#      IMAGE: "query-manager"
#      MODULE_DIR: "query_manager"
#      MODULE_ECR_REPOSITORY: ${{ env.ECR_REGISTRY }}/query-manager
#      MODULE_LAMBDA_FUNCTION_NAME: ${{ env.LAMBDA_FUNCTION }}
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Build and push Docker image for ${{ env.IMAGE }}
#        working-directory: .
#        run: |
#          docker build --platform linux/amd64 -t $IMAGE:latest -f ${{ MODULE_DIR }}/Dockerfile .
#          docker tag $IMAGE:latest $ECR_REGISTRY/$IMAGE:$TAG
#          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
#          docker push $ECR_REGISTRY/$IMAGE:$TAG
#
#      - name: Update AWS Lambda function
#        run: |
#          aws lambda update-function-code \
#            --region $AWS_REGION \
#            --function-name $MODULE_LAMBDA_FUNCTION_NAME \
#            --image-uri $MODULE_ECR_REPOSITORY:${{ env.TAG }}
