name: Deploy Tasks Manager to Prefect Cloud and AWS

on:
  push:
    branches:
      - main
    paths:
      - "tasks_manager/**"
      - "commons/**"
      - "core/**"
      - "story_manager/**"

  workflow_dispatch:
    inputs:
      environment:
        description: "Tasks Manager Deployment environment choices"
        type: choice
        required: true
        options:
          - DEV
          - STAGING
          - PROD

env:
  ecr_repo: "tasks-manager"
  app_name: "tasks_manager"
  ecs_task_definition: "task"

permissions:
  id-token: write
  contents: read

jobs:
  set-vars:
    name: set-vars
    runs-on: ubuntu-latest
    outputs:
      ecr_repo: ${{ steps.set-vars.outputs.ecr_repo }}
      app_name: ${{ steps.set-vars.outputs.app_name }}
      env: ${{ steps.set-vars.outputs.env }}
    steps:
      - name: set-vars
        id: set-vars
        run: |
          echo "ecr_repo=$ecr_repo" >> $GITHUB_OUTPUT
          echo "app_name=$app_name" >> $GITHUB_OUTPUT
          if ${{ github.event.inputs.environment == 'PROD'}}; then
            echo "env=prod" >> $GITHUB_OUTPUT;
          elif ${{ github.event.inputs.environment == 'STAGING' }}; then
            echo "env=staging" >> $GITHUB_OUTPUT;
          else
            echo "env=dev" >> $GITHUB_OUTPUT;
          fi

  generate-tag:
    name: generate-tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v3

      - name: Generate TAG
        id: generate-tag
        run: |
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "tag_id=${COMMIT_HASH}_$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT
    outputs:
      tag_id: ${{ steps.generate-tag.outputs.tag_id }}

  build-image:
    needs: [set-vars, generate-tag]
    uses: ./.github/workflows/reusable-build-image.yml
    with:
      ecr_repo: ${{ needs.set-vars.outputs.ecr_repo }}
      app_name: ${{ needs.set-vars.outputs.app_name }}
      tag: ${{ needs.generate-tag.outputs.tag_id }}
    secrets:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      DEV_DEPLOYMENT_ROLE: ${{ secrets.DEV_DEPLOYMENT_ROLE }}

  deploy:
    runs-on: ubuntu-latest
    needs: [set-vars, generate-tag, build-image]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.DEV_DEPLOYMENT_ROLE }}
          role-session-name: github-action-role

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Dependency Prerequisites
        run: |
          python -m pip install --upgrade pip
          pip install "poetry<2.0.0"

      - name: Install Dependencies
        run: |
          echo "Installing dependencies"
          poetry export -f requirements.txt --output requirements.txt --without-hashes -C tasks_manager
          pip install -U -r requirements.txt

      - name: Update Amazon ECS task definition with latest image id
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./${{ needs.set-vars.outputs.app_name }}/deployment/ecs/task.json
          container-name: tasks-manager-task
          image: ${{ secrets.ECR_REGISTRY }}/${{ needs.set-vars.outputs.ecr_repo }}:${{ needs.generate-tag.outputs.tag_id }}

      - run: cat ${{ steps.render-task-definition.outputs.task-definition }}

      - name: Deploy Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}

      - name: Register Prefect blocks
        working-directory: ${{ needs.set-vars.outputs.app_name }}
        env:
          PREFECT_API_KEY: ${{ secrets.PREFECT_API_KEY }}
          PREFECT_API_URL: ${{ secrets.PREFECT_API_URL }}
        run: |
          prefect blocks register --file ${{ needs.set-vars.outputs.app_name }}/config.py

      - name: Run Prefect Deploy
        working-directory: ${{ needs.set-vars.outputs.app_name }}
        run: |
          prefect --no-prompt deploy --all
        env:
          PREFECT_API_KEY: ${{ secrets.PREFECT_API_KEY }}
          PREFECT_API_URL: ${{ secrets.PREFECT_API_URL }}
