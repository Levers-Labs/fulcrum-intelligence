name: Build and Upload Story Builder Image

on:
  push:
    branches:
      - LEV-418_CI_STORY_BUILDER
#    paths:
#        - 'story_manager/**'
#        - 'commons/**'
#        - 'core/**'

  workflow_dispatch:

env:
  ecr_repo: "story-builder"
  ssm_path: "story-builder/workflow"
  app_name: "story_manager"

permissions:
  id-token: write
  contents: read

jobs:
  set-vars:
    name: set-vars
    runs-on: ubuntu-latest

    outputs:
      ecr_repo: ${{ steps.set-vars.outputs.ecr_repo }}
      app_name: ${{ steps.set-vars.outputs.app_name }}
      ssm_path: ${{ steps.set-vars.outputs.ssm_path }}

    steps:
      - name: set-vars
        id: set-vars
        run: |
          echo "ecr_repo=$ecr_repo" >> $GITHUB_OUTPUT
          echo "app_name=$app_name" >> $GITHUB_OUTPUT
          echo "ssm_path=$ssm_path" >> $GITHUB_OUTPUT

  generate-tag:
    name: generate-tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v3

      - name: Generate TAG
        id: generate-tag
        run: |
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "tag_id=${COMMIT_HASH}_$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT
    outputs:
      tag_id: ${{ steps.generate-tag.outputs.tag_id }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: [ set-vars, generate-tag ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.DEV_DEPLOYMENT_ROLE }}
          role-session-name: OIDCSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: build-and-push
        id: build-and-push
        working-directory: .
        run: |
          IMAGE="${{ secrets.ECR_REGISTRY }}/${{ needs.set-vars.outputs.ecr_repo }}:${{ needs.generate-tag.outputs.tag_id }}"

          echo "Building and tagging the image"
          docker build \
          -t $IMAGE \
          -f ${{ needs.set-vars.outputs.app_name }}/Dockerfile.story_builder .

          echo "Pushing Image to ECR"
          docker push $IMAGE

  update-task-definition:
    runs-on: ubuntu-latest
    needs: [ set-vars, generate-tag, build-and-push ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.DEV_DEPLOYMENT_ROLE }}
          role-session-name: OIDCSession

      - name: configure aws credentials
        uses: dkershner6/aws-ssm-getparameters-action@v1
        with:
            parameterPairs: "/${{ needs.set-vars.outputs.ssm_path }}/ANALYSIS_MANAGER_SERVER_HOST = ANALYSIS_MANAGER_SERVER_HOST,
               /${{ needs.set-vars.outputs.ssm_path }}/AUTH0_API_AUDIENCE = AUTH0_API_AUDIENCE,
               /${{ needs.set-vars.outputs.ssm_path }}/AUTH0_CLIENT_ID = AUTH0_CLIENT_ID,
               /${{ needs.set-vars.outputs.ssm_path }}/AUTH0_CLIENT_SECRET = AUTH0_CLIENT_SECRET,
               /${{ needs.set-vars.outputs.ssm_path }}/AUTH0_ISSUER = AUTH0_ISSUER,
               /${{ needs.set-vars.outputs.ssm_path }}/DATABASE_URL = DATABASE_URL,
               /${{ needs.set-vars.outputs.ssm_path }}/INSIGHTS_BACKEND_SERVER_HOST = INSIGHTS_BACKEND_SERVER_HOST,
               /${{ needs.set-vars.outputs.ssm_path }}/QUERY_MANAGER_SERVER_HOST = QUERY_MANAGER_SERVER_HOST,
               /${{ needs.set-vars.outputs.ssm_path }}/SECRET_KEY = SECRET_KEY,
               /${{ needs.set-vars.outputs.ssm_path }}/SERVER_HOST = SERVER_HOST"
            withDecryption: "true"

      - name: Render ECS task definition with latest image id
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./fulcrum_airflow/deployment/ecs/${{ vars.ECS_TASK_DEFINITION }}.json
          container-name: "story-builder-manager"
          image: "${{ secrets.ECR_REGISTRY }}/${{ needs.set-vars.outputs.ecr_repo }}:${{ needs.generate-tag.outputs.tag_id }}"
          environment-variables: |
            ANALYSIS_MANAGER_SERVER_HOST=${{ env.ANALYSIS_MANAGER_SERVER_HOST }}
            AUTH0_API_AUDIENCE=${{ env.AUTH0_API_AUDIENCE }}
            AUTH0_CLIENT_ID=${{ env.AUTH0_CLIENT_ID }}
            AUTH0_CLIENT_SECRET=${{ env.AUTH0_CLIENT_SECRET }}
            AUTH0_ISSUER=${{ env.AUTH0_ISSUER }}
            DATABASE_URL=${{ env.DATABASE_URL }}
            INSIGHTS_BACKEND_SERVER_HOST=${{ env.INSIGHTS_BACKEND_SERVER_HOST }}
            QUERY_MANAGER_SERVER_HOST=${{ env.QUERY_MANAGER_SERVER_HOST }}
            SECRET_KEY=${{ env.SECRET_KEY }}
            SERVER_HOST=${{ env.SERVER_HOST }}

      - name: Update ECS task definition
        id: update-task-def
        run: |
          # Read the content of the JSON file
          TASK_DEFINITION_JSON=$(cat ${{ steps.render-task-definition.outputs.task-definition }})
          NEW_TASK_INFO=$(aws ecs register-task-definition \
          --region ${{ secrets.AWS_REGION }} \
          --cli-input-json "$TASK_DEFINITION_JSON")
